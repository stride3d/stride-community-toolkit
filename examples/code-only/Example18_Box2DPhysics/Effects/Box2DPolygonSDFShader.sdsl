namespace Example18_Box2DPhysics
{
    shader Box2DPolygonSDFShader : ShaderBase
    {
        // Parameters (up to 8 points)
        stage float2 PolygonPoint0;
        stage float2 PolygonPoint1;
        stage float2 PolygonPoint2;
        stage float2 PolygonPoint3;
        stage float2 PolygonPoint4;
        stage float2 PolygonPoint5;
        stage float2 PolygonPoint6;
        stage float2 PolygonPoint7;
        stage int PolygonCount;
        stage float PolygonRadius;
        stage float PolygonThickness;
        stage float4 PolygonColor;

        //stream float2 Position : POSITION;
        stream float2 TexCoord : TEXCOORD0;

        // SDF helpers
        float cross2d(float2 v1, float2 v2)
        {
            return v1.x * v2.y - v1.y * v2.x;
        }

        float sdConvexPolygon(float2 p, float2 v[8], int count)
        {
            float d = dot(p - v[0], p - v[0]);
            float side = -1.0;
            int j = count - 1;
            for (int i = 0; i < count; ++i)
            {
                float2 e = v[i] - v[j];
                float2 w = p - v[j];
                float we = dot(w, e);
                float2 b = w - e * clamp(we / dot(e, e), 0.0, 1.0);
                float bb = dot(b, b);
                if (bb < d) d = bb;
                float s = cross2d(w, e);
                if (s >= 0.0) side = 1.0;
                j = i;
            }
            return side * sqrt(d);
        }

        float4 blend_colors(float4 front, float4 back)
        {
            float3 cSrc = front.rgb;
            float alphaSrc = front.a;
            float3 cDst = back.rgb;
            float alphaDst = back.a;
            float3 cOut = cSrc * alphaSrc + cDst * alphaDst * (1.0 - alphaSrc);
            float alphaOut = alphaSrc + alphaDst * (1.0 - alphaSrc);
            cOut = cOut / max(alphaOut, 1e-5); // avoid div by zero
            return float4(cOut, alphaOut);
        }

        override stage void VSMain()
        {
            base.VSMain();
        }

        override stage void PSMain()
        {
            float2 uv = streams.TexCoord * 2.0 - 1.0; // Map [0,1] to [-1,1]
            float4 borderColor = PolygonColor;
            float4 fillColor = 0.6 * borderColor;
            float2 v[8];
            v[0] = PolygonPoint0;
            v[1] = PolygonPoint1;
            v[2] = PolygonPoint2;
            v[3] = PolygonPoint3;
            v[4] = PolygonPoint4;
            v[5] = PolygonPoint5;
            v[6] = PolygonPoint6;
            v[7] = PolygonPoint7;
            float dw = sdConvexPolygon(uv, v, PolygonCount);
            float d = abs(dw - PolygonRadius);
            float4 back = float4(fillColor.rgb, fillColor.a * smoothstep(PolygonRadius + PolygonThickness, PolygonRadius, dw));
            float4 front = float4(borderColor.rgb, smoothstep(PolygonThickness, 0.0, d));
            streams.ColorTarget = blend_colors(front, back);
        }
    };
}
