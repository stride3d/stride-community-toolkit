shader MaterialSurfaceShadingLightmap<float TIntensity> : IMaterialSurfaceShading, Math
{
    compose ComputeColor LightMap;

    override float3 ComputeDirectLightContribution()
    {
        var diffuseColor = streams.matDiffuseVisible;

        return diffuseColor / PI * streams.lightColorNdotL * streams.matDiffuseSpecularAlphaBlend.x;
    }

    override float3 ComputeEnvironmentLightContribution()
    {
        var diffuseColor = streams.matDiffuseVisible;
        float3 lightMapColor = LightMap.Compute().rgb;

        // Enhanced environmental lighting: blend the lightmap with diffuse color
        // This adds the lightmap as ambient lighting while preserving original colors
        float intensity = TIntensity / 100.0; // Scale down for practical use
        float3 ambientContribution = lightMapColor * intensity * 0.3; // 30% lightmap influence
        float3 diffuseContribution = diffuseColor / PI * 0.7; // 70% original color

        return ambientContribution + diffuseContribution;
    }
};